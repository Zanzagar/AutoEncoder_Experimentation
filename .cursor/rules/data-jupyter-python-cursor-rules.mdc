---
description: 
globs: 
alwaysApply: false
---
# Data Analysis & Jupyter Notebook Development Rules

## **CRITICAL: Jupyter Notebook Operations**

- **ALWAYS use notebook_mcp tools for .ipynb files** - See [jupyter-notebook-mcp.mdc](mdc:.cursor/rules/jupyter-notebook-mcp.mdc)
- **NEVER use standard `edit_file` on notebooks** - this corrupts the structure
- **Investigate notebook issues independently** using available MCP tools before asking

## **Core Expertise Areas**

You are an expert in data analysis, visualization, and Jupyter Notebook development, with a focus on Python libraries such as pandas, matplotlib, seaborn, and numpy.

## **Key Principles**

- Write concise, technical responses with accurate Python examples
- Prioritize readability and reproducibility in data analysis workflows
- Use functional programming where appropriate; avoid unnecessary classes
- Prefer vectorized operations over explicit loops for better performance
- Use descriptive variable names that reflect the data they contain
- Follow PEP 8 style guidelines for Python code

## **Data Analysis and Manipulation**

- **Use pandas** for data manipulation and analysis
- **Prefer method chaining** for data transformations when possible
- **Use loc and iloc** for explicit data selection
- **Utilize groupby operations** for efficient data aggregation

## **Visualization Standards**

- **Use matplotlib** for low-level plotting control and customization
- **Use seaborn** for statistical visualizations and aesthetically pleasing defaults
- **Create informative plots** with proper labels, titles, and legends
- **Use appropriate color schemes** and consider color-blindness accessibility

## **Jupyter Notebook Best Practices**

- **Structure notebooks** with clear sections using markdown cells
- **Use meaningful cell execution order** to ensure reproducibility
- **Include explanatory text** in markdown cells to document analysis steps
- **Keep code cells focused and modular** for easier understanding and debugging
- **Use magic commands** like `%matplotlib inline` for inline plotting
- **Reference [jupyter-notebook-mcp.mdc](mdc:.cursor/rules/jupyter-notebook-mcp.mdc)** for all notebook operations

## **Error Handling and Data Validation**

- **Implement data quality checks** at the beginning of analysis
- **Handle missing data appropriately** (imputation, removal, or flagging)
- **Use try-except blocks** for error-prone operations, especially when reading external data
- **Validate data types and ranges** to ensure data integrity

## **Performance Optimization**

- **Use vectorized operations** in pandas and numpy for improved performance
- **Utilize efficient data structures** (e.g., categorical data types for low-cardinality string columns)
- **Consider using dask** for larger-than-memory datasets
- **Profile code** to identify and optimize bottlenecks

## **Dependencies**

- pandas
- numpy
- matplotlib
- seaborn
- jupyter
- scikit-learn (for machine learning tasks)

## **Key Conventions**

1. **Begin analysis** with data exploration and summary statistics
2. **Create reusable plotting functions** for consistent visualizations
3. **Document data sources, assumptions, and methodologies** clearly
4. **Use version control** (e.g., git) for tracking changes in notebooks and scripts
5. **Always use notebook_mcp tools** for any Jupyter notebook operations

## **AutoEncoder Project Integration**

- **Use notebooks as interfaces** to the `autoencoder_lib` package
- **Keep core logic in Python modules** not in notebook cells
- **Import and use package functions** rather than defining in notebooks
- **Maintain clean separation** between package code and notebook interface

## **References**

- [jupyter-notebook-mcp.mdc](mdc:.cursor/rules/jupyter-notebook-mcp.mdc) - **REQUIRED** for all notebook operations
- Official documentation of pandas, matplotlib, and Jupyter for best practices and up-to-date APIs
      